version: '3.8'
services:
  #  admin
  nginx:
    build:
      context: .
      dockerfile: ./dockerfiles/nginx/Dockerfile
    container_name: admin_nginx
    restart: on-failure
    ports:
      - "8000:80"
    volumes:
      - ./admin:/home/app
      - ./dockerfiles/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - mysql
      - admin
    networks:
      - main
  admin:
    build:
      context: .
      dockerfile: ./dockerfiles/php/Dockerfile
    container_name: admin_main
    restart: on-failure
    image: reza78/admin_app
    ports:
      - "9000:9000"
    user: 'www-data:www-data'
    volumes:
      - ./admin:/home/app
    networks:
      - main
  composer:
    build:
      context: .
      dockerfile: ./dockerfiles/composer/Dockerfile
    container_name: admin_composer
    volumes:
      - ./admin:/app
    working_dir: /app
    depends_on:
      - admin
    networks:
      - main
  artisan:
    image: reza78/admin_app
    container_name: admin_artisan
    restart: on-failure
    volumes:
      - ./admin:/home/app
    depends_on:
      - mysql
      - admin
    working_dir: /home/app
    entrypoint: [ 'php', '/home/app/artisan' ]
    networks:
      - main
  npm:
    image: node:14
    container_name: admin_npm
    volumes:
      - ./admin:/app
    working_dir: /app
    networks:
      - main
  # end admin
  # db
  mysql:
    image: mysql
    container_name: app_mysql
    restart: on-failure
    tty: true
    ports:
      - "3306:3306"
    volumes:
      - ./mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: secret
    networks:
      - main
  # end db
  # backend
  backend:
    build:
      context: .
      dockerfile: ./dockerfiles/backend/Dockerfile
    container_name: backend
    restart: on-failure
    working_dir: /app
    ports:
      - '3000:3000'
    volumes:
      - type: bind
        source: ./backend
        target: /app
      - /app/node_modules
    depends_on:
      - mysql
    command: npm run dev
    deploy:
      replicas: 1
      update_config:
        delay: 5s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [ node.hostname == slave1 ]
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: admin
      DB_USERNAME: admin
      DB_PASSWORD: secret
    networks:
      - main
  # end backend
  frontend:
    build:
      context: .
      dockerfile: ./dockerfiles/frontend/Dockerfile
    container_name: frontend
    restart: on-failure
    working_dir: /app
    volumes:
      - type: bind
        source: ./frontend
        target: /app
      - /app/node_modules
    ports:
      - '8080:8080'
    networks:
      - main
networks:
  main:
    driver: bridge
